/* This file is automatically generated. DO NOT EDIT! */

#ifndef _segy_h
#define _segy_h


#define SF_SEGY_FORMAT  24
#define SF_SEGY_NS      20
#define SF_SEGY_DT      16


enum {
    SF_EBCBYTES=3200,	/* Bytes in the card image EBCDIC block */
    SF_BNYBYTES=400,	/* Bytes in the binary coded block	*/
    SF_HDRBYTES=240,	/* Bytes in the tape trace header	*/
    SF_NKEYS=91,	/* Number of mandated header fields	*/
    SF_BHKEYS=27,	/* Number of mandated binary fields	*/
    SF_MAXKEYS=256      /* Maximum number of keys               */
};


void segy_init(int nkeys, sf_file hdr);
/*< initialize trace headers >*/


void other_init(int nkeys, sf_file hdr);
/*< initialize non-SEGY trace headers >*/


void ebc2asc (int narr, char* arr);
/*< Convert char array arrr[narr]: EBC to ASCII >*/


void asc2ebc (int narr, char* arr);
/*< Convert char array arrr[narr]: ASCII to EBC >*/


int segyformat (const char* bhead);
/*< extracts SEGY format from binary header >*/


void set_segyformat (char* bhead, int format);
/*< set SEGY format in binary header >*/


int segyns (const char* bhead);
/*< extracts ns (number of samples) from binary header >*/


void set_segyns(char* bhead, int ns);
/*< set ns (number of samples) in binary header >*/


float segydt (const char* bhead);
/*< extracts dt (sampling) from binary header >*/


void set_segydt(char* bhead, float dt);
/*< set dt (sampling) in binary header >*/


void segy2trace(const char* buf, float* trace, int ns, int format);
/*< Extract a floating-point trace[nt] from buffer buf.
---
format: 1: IBM, 2: int4, 3: int2, 5: IEEE
>*/


void trace2segy(char* buf, const float* trace, int ns, int format);
/*< Convert a floating-point trace[ns] to buffer buf.
---
format: 1: IBM, 2: int4, 3: int2, 5: IEEE
>*/


void segy2hist(sf_file head, int nkeys);
/*< write out trace header information to the RSF header >*/


void segy2head(const char* buf, int* trace, int nk);
/*< Create an integer trace header trace[nk] from buffer buf >*/


int segykey (const char* key);
/*< Extract a SEGY key value >*/


const char* segykeyword (int k);
/*< Find a SEGY key from its number >*/


const char* segydesc (int k);
/*< Find a SEGY key description from its number >*/


void head2segy(char* buf, const int* trace, int nk);
/*< Convert an integer trace[nk] to buffer buf >*/


void binary_head(char* buf);
/*< Create a binary header for SEGY >*/


bool endian (void);
/*< Set endianness >*/

#endif
