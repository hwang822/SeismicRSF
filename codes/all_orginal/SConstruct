import os, sys, re, string, types
sys.path.append('../../framework')
import bldutil

progs = '''
aastack agmig ai2refl c2r cascade cgscan cmp2shot constfdmig2
depth2time diffoc diffraction dmo dsr envelope fincon findmo finstack
fkamo fkdmo fold fourvc fourvc2 freqlet gazdag halfint headermath
hwt2d hwtex infill inmo inmo3 intbin intbin3 itaupmo iwarp iwarp2
iwarp3 kirchinv kirchnew kirmod kirmod3 map2coh migsteep3 modrefl
modrefl2 moveout nmo nmo3_ort nmow_adj pmig pnmo pnmo3d preconstkirch
ptaupmo ptaupmoVTI pveltran pveltranVTI pyramid radial radial2 radon
rays2 rays2a refer ricker ricker1 ricker2 rweab rwezomig segyheader
segyread segywrite shot2cmp shotholes shotprop slant srmva srsyn stolt
stolt2 stoltstretch stretch tan2ang taupmo time2depth tshift vczo
vczo3 velmod veltran voft vscan xlagtoang2d zoeppritz zomig zomva
'''

libsrc = 'segy'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
    alias = {'segyread': ['suread'],
             'segywrite': ['suwrite'],
             'stretch': map(lambda x: x+ 'stretch',
                            Split('log t2 t2cheb lmo nmo rad dat scale'))}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../su/lib/SConstruct')

src = Glob('[a-z]*.c')

dynlib = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynlib+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

objects = []
includes = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

    if os.path.splitext(str(source))[0] in libsrc:
        objects.append(obj)
        includes.append(inc)

mains = Split(progs)

##############################################################################
# LIBRARY
##############################################################################
lib = env.StaticLibrary('rsfsegy',objects)
inc = env.Command('rsfsegy.h',includes,Action(bldutil.__merge))

env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        install = env.Install(bindir,main[0])

        if dynlib and env['PLATFORM'] == 'darwin':
             env.AddPostAction(install,
             '%s -change build/api/c/libdrsf.dylib '
             '%s/libdrsf.dylib %s' % \
             (WhereIs('install_name_tool'),libdir,install[0]))

        if prog in alias.keys():
            for al in Split(alias[prog]):
                other = string.replace(str(main[0]),prog,al)
                env.InstallAs(os.path.join(bindir,other),main[0])
                doc = os.path.splitext(other)[0]
                docalias[doc] = 'sf'+prog

for prog in Split('cbanded ctridiagonal veltran'):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfseismic.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs,alias=docalias)

    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
